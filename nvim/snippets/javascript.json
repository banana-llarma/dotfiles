{
  // Javascript
  "im": {
    "prefix": "im",
    "body": [
      "import $1 from '$1'"
    ]
  },
  "func": {
    "prefix": "func",
    "body": [
      "const $1 = ($2) => {",
      "  $0",
      "}"
    ]
  },
  "toUpperCase": {
    "prefix": "toUpperCase",
    "body": [
      "toUpperCase()"
    ]
  },
  "tolowerCase": {
    "prefix": "tolowerCase",
    "body": [
      "toLowerCase()"
    ]
  },
  "cl": {
    "prefix": "cl",
    "body": [
      "console.log($0)"
    ]
  },
  "ce": {
    "prefix": "ce",
    "body": [
      "console.error($0)"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "const $1 = $0"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "\t$0",
      "}"
    ]
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
      "\t$0",
      "}"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let i = 0; $1; i++)"
    ]
  },
  "forOf": {
    "prefix": "forOf",
    "body": [
      "for (i of $1) {",
      "\t$0",
      "}"
    ]
  },
  "forIn": {
    "prefix": "forIn",
    "body": [
      "for (i in $1) {",
      "\t$0",
      "}"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "map(($1) => $0)"
    ]
  },
  "module.exports": {
    "prefix": "moduleExports",
    "body": [
      "module.exports = "
    ]
  },
  "re": {
    "prefix": "re",
    "body": [
      "const $1 = require('$1')"
    ]
  },
  "getElementById": {
    "prefix": "getElementById",
    "body": [
      "getElementById('$0')"
    ]
  },
  "reduce": {
    "prefix": "reduce",
    "body": [
      "reduce((acc, cur${1:, ind}${2:, arr}) => $0)"
    ]
  },
  "getElementByClassName": {
    "prefix": "getElementByClassName",
    "body": [
      "getElementByClassName('$0')"
    ]
  },
  "getElementsById": {
    "prefix": "getElementsById",
    "body": [
      "getElementsByID('$0)"
    ]
  },
  "getElementsByClassName": {
    "prefix": "getElementsByClassName",
    "body": [
      "getElementsByClassName($0)"
    ]
  },
  "querySelector": {
    "prefix": "querySelector",
    "body": [
      "querySelector('$0')"
    ]
  },
  "querySelectorAll": {
    "prefix": "querySelectorAll",
    "body": [
      "querySelectorAll('$0')"
    ]
  },
  "let": {
    "prefix": "let",
    "body": [
      "let $1 = $0"
    ]
  },
  "forEach": {
    "prefix": "forEach",
    "body": [
      "forEach(($1) => $0)"
    ]
  },


  // Node Require
  "reHttp": {
    "prefix": "reHttp",
    "body": [
      "const http = require('http')"
    ]
  },
  "reFs": {
    "prefix": "reFs",
    "body": [
      "const fs = require('fs')"
    ]
  },
  "reExpress": {
    "prefix": "reExpress",
    "body": [
      "const express = require('express')",
      "const app = express()"
    ]
  },
  "rePath": {
    "prefix": "rePath",
    "body": [
      "const path = require('path')"
    ]
  },
  "reOs": {
    "prefix": "reOs",
    "body": [
      "const os = require('os')"
    ]
  },
  "reMongoose": {
    "prefix": "reMongoose",
    "body": [
      "const mongoose = require('mongoose')"
    ]
  },
  "reUrl": {
    "prefix": "reUrl",
    "body": [
      "const url = require('url')"
    ]
  },
  "reRouter": {
    "prefix": "reRouter",
    "body": [
      "const router = express.Router"
    ]
  },
  "reCp": {
    "prefix": "reCp",
    "body": [
      "const cp = require('child_process')"
    ]
  },


  // Node Import
  "imUrl": {
    "prefix": "imUrl",
    "body": [
      "import url from 'url'"
    ]
  },
  "imExpress": {
    "prefix": "imExpress",
    "body": [
      "import express from 'express'",
      "const app = express()"
    ]
  },
  "imHttp": {
    "prefix": "imHttp",
    "body": [
      "import http from 'http'"
    ]
  },
  "imMongoose": {
    "prefix": "imMongoose",
    "body": [
      "import mongoose from 'mongoose'"
    ]
  },


  // node path module
  "path.basename": {
    "prefix": "path.basename",
    "body": [
      "path.basename($0)"
    ]
  },
  "path.dirname": {
    "prefix": "path.dirname",
    "body": [
      "path.dirname($0)"
    ]
  },
  "path.extname": {
    "prefix": "path.extname",
    "body": [
      "path.extname($0)"
    ]
  },
  "path.parse": {
    "prefix": "path.parse",
    "body": [
      "path.parse($0)"
    ]
  },
  "path.join": {
    "prefix": "path.join",
    "body": [
      "path.join($0)"
    ]
  },

  // Node express module
  "app.get": {
    "prefix": "appGet",
    "body": [
      "app.get('$1', (req, res) => $0)"
    ]
  },
  "app.use": {
    "prefix": "app.use",
    "body": [
      "app.use($0)"
    ]
  },
  "app.listen": {
    "prefix": "app.listen",
    "body": [
      "app.listen((${1:port}) => console.log(`listening on port $0`))"
    ]
  },
  "app.post": {
    "prefix": "app.post",
    "body": [
      "app.post('${1:port}', (req, res) => $0)"
    ]
  },


  // Node fs module
  "fs.writeFile": {
    "prefix": "fs.writeFile",
    "body": [
      "fs.writeFile(${1:file}, ${2:data}, (err) => $0)"
    ]
  },
  "fs.open": {
    "prefix": "fs.open",
    "body": [
      "fs.open(${1:path}, ${2:flag}, (err, fd) => $0)"
    ]
  },
  "fs.readFile": {
    "prefix": "fs.readFile",
    "body": [
      "fs.readFile(${1:path}, 'utf8', (err, data) => $0)"
    ]
  },
  "fs.readFileSync": {
    "prefix": "fs.readFileSync",
    "body": [
      "fs.readFileSync(${0:path}, 'utf8')"
    ]
  },
  "fs.readdir": {
    "prefix": "fs.readdir",
    "body": [
      "fs.readdir(${1:path}, (err, files) => $0)"
    ]
  },
  "fs.mkdir": {
    "prefix": "fs.mkdir",
    "body": [
      "fs.mkdir(${1:path}, {}, (err) => $0"
    ]
  },
  "fs.appendFile": {
    "prefix": "fs.appendFile",
    "body": [
      "fs.appendFile(${1:file}, ${0:data})"
    ]
  },
  "fs.readdirSync": {
    "prefix": "fs.readdirSync",
    "body": [
      "fs.readdirSync(${0:path}, 'utf8')"
    ]
  },
  "fs.rename": {
    "prefix": "fs.rename",
    "body": [
      "fs.rename(${1:path}, ${2:newPath}, (err) => $0)"
    ]
  },

  // Node os module
  "os.platform": {
    "prefix": "os.platform",
    "body": [
      "os.platform()"
    ]
  },
  "os.arch": {
    "prefix": "os.arch",
    "body": [
      "os.arch()"
    ]
  },
"os.cpus": {
  "prefix": "os.cpus",
  "body": [
    "os.cpus()"
  ]
},
  "os.freemem": {
    "prefix": "os.freemem",
    "body": [
      "os.freemem()"
    ]
  },
  "os.totalmem": {
    "prefix": "os.totalmem",
    "body": [
      "os.totalmem()"
    ]
  },
  "os.homedir": {
    "prefix": "os.homedir",
    "body": [
      "os.homedir()"
    ]
  },
  "os.uptime": {
    "prefix": "os.uptime",
    "body": [
      "os.uptime()"
    ]
  },

  // Node url module
  "newUrl": {
    "prefix": "newUrl",
    "body": [
      "new URL('http://$0')"
    ]
  },

  // Node Event module
  "reEvents": {
    "prefix": "reEvents",
    "body": [
      "const EventEmitter = require('events')"
    ]
  },
  "myEmitter": {
    "prefix": "MyEmitter",
    "body": [
      "class MyEmitter extends EventEmitter {}",
      "const myEmitter = new MyEmitter()"
    ]
  },


  // Node http Module
  "http.createServer": {
    "prefix": "http.createServer",
    "body": [
      "http.createServer((req, res) => $0)"
    ]
  },
  "res.write": {
    "prefix": "res.write",
    "body": [
      "res.write($0)"
    ]
  },
  "res.end": {
    "prefix": "res.end",
    "body": [
      "res.end()"
    ]
  },


  // misclania
  ".listen": {
    "prefix": ".listen",
    "body": [
      ".listen(${1:Port}, () => console.log('server running...'))"
    ]
  },
  "port": {
    "prefix": "port",
    "body": [
      "const port = process.env.PORT | 3001"
    ]
  },



}