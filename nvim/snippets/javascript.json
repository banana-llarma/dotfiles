{
  "reHttp": {
    "prefix": "reHttp",
    "body": [
      "const http = require('http')"
    ]
  },
  "reFs": {
    "prefix": "reFs",
    "body": [
      "const fs = require('fs')"
    ]
  },
  "reExpress": {
    "prefix": "reExpress",
    "body": [
      "const express = require('express')",
      "const app = express()"
    ]
  },
  "func": {
    "prefix": "func",
    "body": [
      "const $1 = ($2) => {",
        "  $0",
        "}"
    ]
  },
  "cl": {
    "prefix": "cl",
    "body": [
      "console.log($0)"
    ]
  },
  "rePath": {
    "prefix": "rePath",
    "body": [
      "const path = require('path')"
    ]
  },
  "reOs": {
    "prefix": "reOs",
    "body": [
      "const os = require('os')"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "const $1 = $0"
    ]
  },
  "reMongoose": {
    "prefix": "reMongoose",
    "body": [
      "const mongoose = require('mongoose')"
    ]
  },
  "reUrl": {
    "prefix": "reUrl",
    "body": [
      "const url = require('url')"
    ]
  },
  "httpCreateServer": {
    "prefix": "httpCreateServer",
    "body": [
      "http.createServer((req, res) => $1 {",
        "\t$0",
        "}).listen(port)"
    ]
  },
  "imUrl": {
    "prefix": "imUrl",
    "body": [
      "import url from 'url'"
    ]
  },
  "imExpress": {
    "prefix": "imExpress",
    "body": [
      "import express from 'express'",
      "const app = express()"
    ]
  },
  "appListen": {
    "prefix": "appListen",
    "body": [
      "app.listen(${1:${port}}, () => $0)"
    ]
  },
  "imHttp": {
    "prefix": "imHttp",
    "body": [
      "import http from 'http'"
    ]
  },
  "appGet": {
    "prefix": "appGet",
    "body": [
      "app.get('$1', (req, res) => $0)"
    ]
  },
  "imMongoose": {
    "prefix": "imMongoose",
    "body": [
      "import mongoose from 'mongoose'"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
        "\t$0",
        "}"
    ]
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
        "\t$0",
        "}"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let i = 0; $1; i++)"
    ]
  },
  "forOf": {
    "prefix": "forOf",
    "body": [
      "for (i of $1) {",
        "\t$0",
        "}"
    ]
  },
  "forIn": {
    "prefix": "forIn",
    "body": [
      "for (i in $1) {",
        "\t$0",
        "}"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "map($1 => $0)"
    ]
  },
  "moduleExports": {
    "prefix": "moduleExports",
    "body": [
      "module.exports = "
    ]
  },
  "reRouter": {
    "prefix": "reRouter",
    "body": [
      "const router = express.Router"
    ]
  },
  "require": {
    "prefix": "require",
    "body": [
      "const $1 = require('$0')"
    ]
  },
  "getElementById": {
    "prefix": "getElementById",
    "body": [
      "getElementById('$0')"
    ]
  },
  "getElementByClassName": {
    "prefix": "getElementByClassName",
    "body": [
      "getElementByClassName('$0')"
    ]
  },
  "getElementsById": {
    "prefix": "getElementsById",
    "body": [
      "getElementsByID('$0)"
    ]
  },
  "getElementsByClassName": {
    "prefix": "getElementsByClassName",
    "body": [
      "getElementsByClassName($0)"
    ]
  },
  "querySelector": {
    "prefix": "querySelector",
    "body": [
      "querySelector('$0')"
    ]
  },
  "querySelectorAll": {
    "prefix": "querySelectorAll",
    "body": [
      "querySelectorAll($0)"
    ]
  },
  "reCp": {
    "prefix": "reCp",
    "body": [
      "const cp = require('child_process')"
    ]
  },
  "fsWriteFile": {
    "prefix": "fsWriteFile",
    "body": [
      "fs.writeFile(${1:file}, ${2:data}, err => $0)"
    ]
  },
  "fsOpen": {
    "prefix": "fsOpen",
    "body": [
      "fs.open(${1:path}, ${2:flag}, (err, fd) => $0)"
    ]
  },
  "fsReadFile": {
    "prefix": "fsReadFile",
    "body": [
      "fs.readFile(${1:path}, 'utf8', (err, data) => $0)"
    ]
  },
  "fsReadFileSync": {
    "prefix": "fsReadFileSync",
    "body": [
      "fs.readFileSync(${0:path}, 'utf8')"
    ]
  },
  "fsReaddir": {
    "prefix": "fsReaddir",
    "body": [
      "fs.readdir(${1:path}, (err, files) => $0)"
    ]
  },
  "appPost": {
    "prefix": "appPost",
    "body": [
      "app.post('${1:route}', (req, res) => $0)"
    ]
  },
  "imFs": {
    "prefix": "imFs",
    "body": [
      "import fs from 'fs'"
    ]
  },
  "let": {
    "prefix": "let",
    "body": [
      "let $1 = $0"
    ]
  },
  "NfsReaddirSync": {
    "prefix": "NfsReaddirSync",
    "body": [
      "fs.readdirSync(${0:path}, 'utf8')"
    ]
  }
}
